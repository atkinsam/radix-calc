// Copyright 2017 Dave Goodell <dave@goodell.io>
// See LICENSE file for license terms (MIT license)
//
// A simple grammar for an infix expression arithmetic calculator.
//
// All arithmetic is done using i64 types.  At some point I might add support
// for u64/i32/u32 types.
//
// The whitespace token placement in the grammar could probably be optimized
// for slightly better parsing performance, but this version works well enough
// for me right now.

_ = #quiet<[ \t\n\r]*>

dec_lit -> i64 = n:$([0-9] ([0-9] / "_")*) {
    i64::from_str_radix(&*n.replace("_", ""), 10).unwrap()
}

hex_lit -> i64 = "0x" n:$([0-9a-fA-F_]+) {
    i64::from_str_radix(&*n.replace("_", ""), 16).unwrap()
}

bin_lit -> i64 = "0b" n:$([01_]+) {
    i64::from_str_radix(&*n.replace("_", ""), 2).unwrap()
}

oct_lit -> i64 = "0o" n:$([0-7_]+) {
    i64::from_str_radix(&*n.replace("_", ""), 8).unwrap()
}

num_lit -> i64 = n:#quiet<(hex_lit / oct_lit / bin_lit / dec_lit)> {
    n
} / #expected("numeric literal")

unary_expr -> i64 = _ un_op:$([-~]) _ n:atom {
    match un_op {
        "~" => !n,
        "-" => -n,
        _ => panic!("unhandled un_op"),
    }
}

// see suggestion at https://github.com/kevinmehall/rust-peg/issues/167
atom -> i64 = _ "(" _ v:infix_arith _ ")" _ { v }
            / _ v:unary_expr _ { v }
            / _ v:num_lit _ { v }

infix_arith -> i64 = #infix<atom> {
    #L x "|" y  { x | y }

    #L x "^" y  { x ^ y }

    #L x "&" y  { x & y }

    #L x ">>" y { x >> y }
       x "<<" y { x << y }

    #L x "+" y  { x + y }
       x "-" y  { x - y }

    #L x "*" y  { x * y }
       x "/" y  { x / y }
       x "%" y  { x % y }

    #L x "**" y { x.pow(y as u32) }
}

pub expr -> i64 = _ v:(infix_arith / unary_expr / num_lit) _ { v }
